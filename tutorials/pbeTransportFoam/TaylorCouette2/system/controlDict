/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pbeTransportFoam;

<<<<<<< HEAD
startFrom       latestTime;
=======
startFrom       startTime;
>>>>>>> 732c5e01c23d931aeea9dd093ce6d7f6b0e3c5bf

startTime       0;

stopAt          endTime;

<<<<<<< HEAD
endTime         50000;

deltaT          1;

writeControl    runTime;

writeInterval   100;
=======
endTime         5000;

deltaT          10;

writeControl    adjustableRunTime;

writeInterval   10;
>>>>>>> 732c5e01c23d931aeea9dd093ce6d7f6b0e3c5bf

purgeWrite      10;

writeFormat     binary;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   12;

runTimeModifiable true;

<<<<<<< HEAD
functions
{
    epsilonVolAverage
=======
adjustTimeStep  yes;

maxCo           0.9;

maxDeltaT       10;

functions
{  
    d43Average
>>>>>>> 732c5e01c23d931aeea9dd093ce6d7f6b0e3c5bf
    {
        functionObjectLibs ("libutilityFunctionObjects.so");
        type coded;
        redirectType integral;
        outputControl timeStep;
        code
        #{
<<<<<<< HEAD
        const volScalarField& epsilon
                = mesh().lookupObject<volScalarField>("epsilon");
=======
        const volScalarField& m3 
                = mesh().lookupObject<volScalarField>("moment.3.populationBalance");
                
        const volScalarField& m4
                = mesh().lookupObject<volScalarField>("moment.4.populationBalance");
                
        volScalarField d43(m4/m3);
>>>>>>> 732c5e01c23d931aeea9dd093ce6d7f6b0e3c5bf

        scalar volAverage = 0;
        scalar totalVolume = 0;

<<<<<<< HEAD
        forAll (epsilon, cellI)
=======
        forAll (d43, cellI)
>>>>>>> 732c5e01c23d931aeea9dd093ce6d7f6b0e3c5bf
        {
            totalVolume += mesh().V()[cellI];
        }

<<<<<<< HEAD
        forAll (epsilon, cellI)
        {
            volAverage += epsilon[cellI]*mesh().V()[cellI]/totalVolume;
        }

        Info<<"Volume averaged epsilon: " << volAverage << endl;

        #};
    }

//     d43Average
//     {
//         functionObjectLibs ("libutilityFunctionObjects.so");
//         type coded;
//         redirectType integral;
//         outputControl timeStep;
//         code
//         #{
//         const volScalarField& m3
//              = mesh().lookupObject<volScalarField>("moment.3.populatioBalance");
//
//         const volScalarField& m4
//              = mesh().lookupObject<volScalarField>("moment.4.populatioBalance");
//
//         volScalarField d43(m4/m3);
//
//         scalar volAverage = 0;
//         scalar totalVolume = 0;
//
//         forAll (d43, cellI)
//         {
//             totalVolume += mesh().V()[cellI];
//         }
//
//         forAll (d43, cellI)
//         {
//             volAverage += d43[cellI]*mesh().V()[cellI]/totalVolume;
//         }
//
//         Info<<"Volume averaged normalized d43: " << volAverage/(2.0e-6) << endl;
//
//         #};
//     }
=======
        forAll (d43, cellI)
        {
            volAverage += d43[cellI]*mesh().V()[cellI]/totalVolume;
        }

        Info<<"Volume averaged normalized d43: " << volAverage/(2.0e-6) << endl;

        #};
    }
>>>>>>> 732c5e01c23d931aeea9dd093ce6d7f6b0e3c5bf
}


// ************************************************************************* //
