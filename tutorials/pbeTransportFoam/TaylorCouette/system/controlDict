/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pbeTransportFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         5000;

deltaT          10;

writeControl    adjustableRunTime;

writeInterval   10;

purgeWrite      10;

writeFormat     binary;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   12;

runTimeModifiable true;

adjustTimeStep  yes;

maxCo           0.9;

maxDeltaT       10;

functions
{  
    probes
    {
        // Where to load it from
        functionObjectLibs ( "libsampling.so" );

        type            probes;

        // Name of the directory for probe data
        name            probes;

        // Write at same frequency as fields
        outputControl   timeStep;
        outputInterval  1;

        // Fields to be probed
        fields
        (
            moment.0.populationBalance 
            moment.1.populationBalance
            moment.2.populationBalance
            moment.3.populationBalance
            moment.4.populationBalance
            node0.populationBalance.abscissa
            node1.populationBalance.abscissa
            node0.populationBalance.weight
            node1.populationBalance.weight
            node1.populationBalance.sigma
        );

        probeLocations
        (
            ( 0.080 0.090 0 )        
        );
    }

    d43Average
    {
        functionObjectLibs ("libutilityFunctionObjects.so");
        type coded;
        redirectType integral;
        outputControl timeStep;
        code
        #{
        const volScalarField& m3 
                = mesh().lookupObject<volScalarField>("moment.3.populationBalance");
                
        const volScalarField& m4
                = mesh().lookupObject<volScalarField>("moment.4.populationBalance");
                
        volScalarField d43(m4/m3);

        scalar volAverage = 0;
        scalar totalVolume = 0;

        forAll (d43, cellI)
        {
            totalVolume += mesh().V()[cellI];
        }

        forAll (d43, cellI)
        {
            volAverage += d43[cellI]*mesh().V()[cellI]/totalVolume;
        }

        Info<<"Volume averaged normalized d43: " << volAverage/(2.0e-6) << endl;

        #};
    }
}


// ************************************************************************* //
